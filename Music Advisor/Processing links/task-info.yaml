type: edu
files:
  - name: src/advisor/Main.java
    visible: true
    text: |
      package advisor;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      apply plugin: 'java'
      apply plugin: 'application'
      
      group 'advisor'
      version '1.0-SNAPSHOT'
      
      repositories {
          mavenCentral()
      }
      
      dependencies {
          implementation 'com.google.code.gson:gson:+'
      }
      
      jar {
          manifest {
              attributes 'Main-Class' : 'advisor.Main'
          }
          from {
              configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
          }
      }
    learner_created: false
  - name: test/MockTokenServer.java
    visible: false
    text: |
      import org.hyperskill.hstest.mocks.web.WebServerMock;
      
      public class MockTokenServer extends Thread {
      
          WebServerMock accessServer;
      
          public MockTokenServer (WebServerMock accessServer) {
              this.accessServer = accessServer;
          }
      
          @Override
          public void run() {
              accessServer.start();
              accessServer.run();
          }
      
          public void stopMock() {
              interrupt();
          }
      }
    learner_created: false
  - name: test/MusicAdvisorTest.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.WebServerMock;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.AfterClass;
      
      @SuppressWarnings("unused")
      public class MusicAdvisorTest extends StageTest<String> {
      
          private static final String fictiveAuthCode = "123123";
          private static final String fictiveAccessToken = "456456";
          private static final String fictiveRefreshToken = "567567";
      
      
          private static final int accessServerPort = 56788;
          private static final int resourceServerPort = 56789;
      
          private static final String accessServerUrl = "http://127.0.0.1:" + accessServerPort;
          private static final String resourceServerUrl = "http://127.0.0.1:" + resourceServerPort;
      
          private static final String[] arguments = new String[]{
                  "-access",
                  accessServerUrl,
                  "-resource",
                  resourceServerUrl
          };
      
          private static final String tokenResponse = "{" +
                  "\"access_token\":\"" + fictiveAccessToken + "\"," +
                  "\"token_type\":\"Bearer\"," +
                  "\"expires_in\":3600," +
                  "\"refresh_token\":" + "\"" + fictiveRefreshToken + "\"," +
                  "\"scope\":\"\"" +
                  "}";
      
          // TODO handle auth code argument to get the token.
          private static final WebServerMock accessServer = new WebServerMock(accessServerPort)
                  .setPage("/api/token", tokenResponse);
      
      
          private static final String spotifyServerUrl = "https://api\\.spotify\\.com";
      
          private static final String apiCategoriesResponse = """
              {
                  "categories": {
                      "href": "https://api.spotify.com/v1/browse/categories?offset=0&limit=20",
                      "items": [
                          {
                              "href": "https://api.spotify.com/v1/browse/categories/toplists",
                              "icons": [
                                  {
                                      "height": 275,
                                      "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/toplists_11160599e6a04ac5d6f2757f5511778f_0_0_275_275.jpg",
                                      "width": 275
                                  }
                              ],
                              "id": "toplists",
                              "name": "Top Lists"
                          },
                          {
                              "href": "https://api.spotify.com/v1/browse/categories/mood",
                              "icons": [
                                  {
                                      "height": 274,
                                      "url": "https://datsnxq1rwndn.cloudfront.net/media/original/mood-274x274_976986a31ac8c49794cbdc7246fd5ad7_274x274.jpg",
                                      "width": 274
                                  }
                              ],
                              "id": "mood",
                              "name": "Super Mood"
                          },
                          {
                              "href": "https://api.spotify.com/v1/browse/categories/party",
                              "icons": [
                                  {
                                      "height": 274,
                                      "url": "https://datsnxq1rwndn.cloudfront.net/media/derived/party-274x274_73d1907a7371c3bb96a288390a96ee27_0_0_274_274.jpg",
                                      "width": 274
                                  }
                              ],
                              "id": "party",
                              "name": "Party Time"
                          }
                      ],
                      "limit": 20,
                      "next": null,
                      "offset": 0,
                      "previous": null,
                      "total": 3
                  }
              }""".replaceAll(spotifyServerUrl, resourceServerUrl);
      
      
          private static final String apiPlaylistsPartyResponse = """
              {
                  "playlists": {
                      "href": "https://api.spotify.com/v1/browse/categories/party/playlists?offset=0&limit=20",
                      "items": [
                          {
                              "collaborative": false,
                              "external_urls": {
                                  "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                              },
                              "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen",
                              "id": "4k7EZPI3uKMz4aRRrLVfen",
                              "images": [
                                  {
                                      "height": 300,
                                      "url": "https://i.scdn.co/image/bf6544c213532e9650088dfef76c8521093d970e",
                                      "width": 300
                                  }
                              ],
                              "name": "Noite Eletronica",
                              "owner": {
                                  "external_urls": {
                                      "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                  },
                                  "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                  "id": "spotifybrazilian",
                                  "type": "user",
                                  "uri": "spotify:user:spotifybrazilian"
                              },
                              "public": null,
                              "snapshot_id": "PULvu1V2Ps8lzCxNXfNZTw4QbhBpaV0ZORc03Mw6oj6kQw9Ks2REwhL5Xcw/74wL",
                              "tracks": {
                                  "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4k7EZPI3uKMz4aRRrLVfen/tracks",
                                  "total": 100
                              },
                              "type": "playlist",
                              "uri": "spotify:user:spotifybrazilian:playlist:4k7EZPI3uKMz4aRRrLVfen"
                          },
                          {
                              "collaborative": false,
                              "external_urls": {
                                  "spotify": "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                              },
                              "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770",
                              "id": "4HZh0C9y80GzHDbHZyX770",
                              "images": [
                                  {
                                      "height": 300,
                                      "url": "https://i.scdn.co/image/be6c333146674440123073cb32c1c8b851e69023",
                                      "width": 300
                                  }
                              ],
                              "name": "Festa Indie",
                              "owner": {
                                  "external_urls": {
                                      "spotify": "http://open.spotify.com/user/spotifybrazilian"
                                  },
                                  "href": "https://api.spotify.com/v1/users/spotifybrazilian",
                                  "id": "spotifybrazilian",
                                  "type": "user",
                                  "uri": "spotify:user:spotifybrazilian"
                              },
                              "public": null,
                              "snapshot_id": "V66hh9k2HnLCdzHvtoXPv+tm0jp3ODM63SZ0oISfGnlHQxwG/scupDbKgIo99Zfz",
                              "tracks": {
                                  "href": "https://api.spotify.com/v1/users/spotifybrazilian/playlists/4HZh0C9y80GzHDbHZyX770/tracks",
                                  "total": 74
                              },
                              "type": "playlist",
                              "uri": "spotify:user:spotifybrazilian:playlist:4HZh0C9y80GzHDbHZyX770"
                          }
                      ],
                      "limit": 20,
                      "next": null,
                      "offset": 0,
                      "previous": null,
                      "total": 2
                  }
              }""".replaceAll(spotifyServerUrl, resourceServerUrl);
      
          private static final String testErrorMessage = "Test unpredictable error message";
      
          private static final String apiTestErrorResponse = "{\"error\":{\"status\":404,\"message\":\"" + testErrorMessage + "\"}}";
      
          private static final String apiNewReleasesResponse = """
              {
                  "albums": {
                      "href": "https://api.spotify.com/v1/browse/new-releases?offset=0&limit=20",
                      "items": [
                          {
                              "album_type": "single",
                              "artists": [
                                  {
                                      "external_urls": {
                                          "spotify": "https://open.spotify.com/artist/2RdwBSPQiwcmiDo9kixcl8"
                                      },
                                      "href": "https://api.spotify.com/v1/artists/2RdwBSPQiwcmiDo9kixcl8",
                                      "id": "2RdwBSPQiwcmiDo9kixcl8",
                                      "name": "Pharrell Williams",
                                      "type": "artist",
                                      "uri": "spotify:artist:2RdwBSPQiwcmiDo9kixcl8"
                                  }
                              ],
                              "available_markets": [
                                  "AD"
                              ],
                              "external_urls": {
                                  "spotify": "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                              },
                              "href": "https://api.spotify.com/v1/albums/5ZX4m5aVSmWQ5iHAPQpT71",
                              "id": "5ZX4m5aVSmWQ5iHAPQpT71",
                              "name": "Runnin'",
                              "type": "album",
                              "uri": "spotify:album:5ZX4m5aVSmWQ5iHAPQpT71"
                          },
                          {
                              "album_type": "single",
                              "artists": [
                                  {
                                      "external_urls": {
                                          "spotify": "https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4"
                                      },
                                      "href": "https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4",
                                      "id": "3TVXtAsR1Inumwj472S9r4",
                                      "name": "Drake2",
                                      "type": "artist",
                                      "uri": "spotify:artist:3TVXtAsR1Inumwj472S9r4"
                                  },
                                  {
                                      "external_urls": {
                                          "spotify": "https://open.spotify.com/artist/3TVXtAsR1Inumwj472S9r4"
                                      },
                                      "href": "https://api.spotify.com/v1/artists/3TVXtAsR1Inumwj472S9r4",
                                      "id": "3TVXtAsR1Inumwj472S9r4",
                                      "name": "Drake3",
                                      "type": "artist",
                                      "uri": "spotify:artist:3TVXtAsR1Inumwj472S9r4"
                                  }
                              ],
                              "available_markets": [
                                  "AD"
                              ],
                              "external_urls": {
                                  "spotify": "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                              },
                              "href": "https://api.spotify.com/v1/albums/0geTzdk2InlqIoB16fW9Nd",
                              "id": "0geTzdk2InlqIoB16fW9Nd",
                              "name": "Sneakin'",
                              "type": "album",
                              "uri": "spotify:album:0geTzdk2InlqIoB16fW9Nd"
                          }
                      ],
                      "limit": 20,
                      "next": null,
                      "offset": 0,
                      "previous": null,
                      "total": 2
                  }
              }""".replaceAll(spotifyServerUrl, resourceServerUrl);
      
      
          private static final String apiFeaturedPlaylistsResponse = """
              {
                  "message": "Monday morning music, coming right up!",
                  "playlists": {
                      "href": "https://api.spotify.com/v1/browse/featured-playlists?offset=0&limit=20",
                      "items": [
                          {
                              "collaborative": false,
                              "external_urls": {
                                  "spotify": "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                              },
                              "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7",
                              "id": "6ftJBzU2LLQcaKefMi7ee7",
                              "images": [
                                  {
                                      "height": 300,
                                      "url": "https://i.scdn.co/image/7bd33c65ebd1e45975bbcbbf513bafe272f033c7",
                                      "width": 300
                                  }
                              ],
                              "name": "Monday Morning Mood",
                              "owner": {
                                  "external_urls": {
                                      "spotify": "http://open.spotify.com/user/spotify"
                                  },
                                  "href": "https://api.spotify.com/v1/users/spotify",
                                  "id": "spotify",
                                  "type": "user",
                                  "uri": "spotify:user:spotify"
                              },
                              "public": null,
                              "snapshot_id": "WwGvSIVUkUvGvqjgj/bQHlRycYmJ2TkoIxYfoalWlmIZT6TvsgvGMgtQ2dGbkrAW",
                              "tracks": {
                                  "href": "https://api.spotify.com/v1/users/spotify/playlists/6ftJBzU2LLQcaKefMi7ee7/tracks",
                                  "total": 245
                              },
                              "type": "playlist",
                              "uri": "spotify:user:spotify:playlist:6ftJBzU2LLQcaKefMi7ee7"
                          },
                          {
                              "collaborative": false,
                              "external_urls": {
                                  "spotify": "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                              },
                              "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO",
                              "id": "4uOEx4OUrkoGNZoIlWMUbO",
                              "images": [
                                  {
                                      "height": 300,
                                      "url": "https://i.scdn.co/image/24aa1d1b491dd529b9c03392f350740ed73438d8",
                                      "width": 300
                                  }
                              ],
                              "name": "Upp och hoppa!",
                              "owner": {
                                  "external_urls": {
                                      "spotify": "http://open.spotify.com/user/spotify__sverige"
                                  },
                                  "href": "https://api.spotify.com/v1/users/spotify__sverige",
                                  "id": "spotify__sverige",
                                  "type": "user",
                                  "uri": "spotify:user:spotify__sverige"
                              },
                              "public": null,
                              "snapshot_id": "0j9Rcbt2KtCXEXKtKy/tnSL5r4byjDBOIVY1dn4S6GV73EEUgNuK2hU+QyDuNnXz",
                              "tracks": {
                                  "href": "https://api.spotify.com/v1/users/spotify__sverige/playlists/4uOEx4OUrkoGNZoIlWMUbO/tracks",
                                  "total": 38
                              },
                              "type": "playlist",
                              "uri": "spotify:user:spotify__sverige:playlist:4uOEx4OUrkoGNZoIlWMUbO"
                          }
                      ],
                      "limit": 20,
                      "next": null,
                      "offset": 0,
                      "previous": null,
                      "total": 2
                  }
              }""".replaceAll(spotifyServerUrl, resourceServerUrl);
      
          private static final TempWebServerMock resourceServerMock = new TempWebServerMock(resourceServerPort)
                  .setPage("/v1/browse/categories", apiCategoriesResponse)
                  .setPage("/v1/browse/categories/party/playlists", apiPlaylistsPartyResponse)
                  // unpredictable error on toplists request!!!
                  .setPage("/v1/browse/categories/toplists/playlists", apiTestErrorResponse)
                  .setPage("/v1/browse/new-releases", apiNewReleasesResponse)
                  .setPage("/v1/browse/featured-playlists", apiFeaturedPlaylistsResponse);
      
          private static final MockTokenServer tokenServer = new MockTokenServer(accessServer);
          private static final MockTokenServer resourceServer = new MockTokenServer(resourceServerMock);
      
          public static void auth(TestedProgram userProgram) {
      
              Server server = new Server(userProgram, fictiveAuthCode);
              server.start();
      
              synchronized (accessServer) {
                  if (!accessServer.isStarted())
                      tokenServer.start();
              }
      
              synchronized (resourceServerMock) {
                  if (!resourceServerMock.isStarted())
                      resourceServer.start();
              }
      
              userProgram.goBackground();
              userProgram.execute("auth");
      
              try {
                  server.join();
              } catch (InterruptedException e) {
                  e.printStackTrace();
              }
      
              if (Server.checkResult != null) {
                  throw new WrongAnswer(Server.checkResult.getFeedback());
              }
      
              userProgram.stopBackground();
          }
      
          @DynamicTest
          CheckResult testNewWithoutAuth() {
      
              TestedProgram userProgram = new TestedProgram();
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              userProgram.execute("new");
      
              String outputAfterNew = userProgram.getOutput();
      
              if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                  return CheckResult.wrong("When no access provided you should output " +
                          "\"Please, provide access for application.\"");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testFeaturedWithoutAuth() {
      
              TestedProgram userProgram = new TestedProgram();
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              userProgram.execute("featured");
      
              String outputAfterNew = userProgram.getOutput();
      
              if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                  return CheckResult.wrong("When no access provided you should output " +
                          "\"Please, provide access for application.\"");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testCategoriesWithoutAuth() {
      
              TestedProgram userProgram = new TestedProgram();
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              userProgram.execute("categories");
      
              String outputAfterNew = userProgram.getOutput();
      
              if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                  return CheckResult.wrong("When no access provided you should output " +
                          "\"Please, provide access for application.\"");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testPlaylistWithoutAuth() {
      
              TestedProgram userProgram = new TestedProgram();
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              userProgram.execute("playlists Party Time");
      
              String outputAfterNew = userProgram.getOutput();
      
              if (!outputAfterNew.strip().startsWith("Please, provide access for application.")) {
                  return CheckResult.wrong("When no access provided you should output " +
                          "\"Please, provide access for application.\"");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testAuth() {
      
              TestedProgram userProgram = new TestedProgram();
      
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              auth(userProgram);
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
      
          }
      
          @DynamicTest
          CheckResult testNew() {
      
              TestedProgram userProgram = new TestedProgram();
      
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              auth(userProgram);
      
              userProgram.execute("new");
      
              if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                  return CheckResult.wrong("Access token is incorrect!");
              }
      
              String outputAfterNew = userProgram.getOutput();
      
              String album1 =
                      "Runnin'\n" +
                              "[Pharrell Williams]\n" +
                              "https://open.spotify.com/album/5ZX4m5aVSmWQ5iHAPQpT71"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              String album2 =
                      "Sneakin'\n" +
                              "[Drake2, Drake3]\n" +
                              "https://open.spotify.com/album/0geTzdk2InlqIoB16fW9Nd"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              if (outputAfterNew.contains("Invalid access token")) {
                  return CheckResult.wrong("Your answer was `Invalid access token` on `new` action. " +
                          "Make sure you use the server from -resource command line argument.");
              }
      
              if (!outputAfterNew.contains(album1) || !outputAfterNew.contains(album2)) {
                  return CheckResult.wrong(
                          "There are no albums in correct format on \"new\" action. " +
                                  "Make sure you use the server from -resource command line argument.");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testCategories() {
      
              TestedProgram userProgram = new TestedProgram();
      
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              auth(userProgram);
      
              userProgram.execute("categories");
      
              if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                  return CheckResult.wrong("An error occurred while retrieving the category list:\n" +
                          "Access token is incorrect!");
              }
      
              String outputAfterCategories = userProgram.getOutput();
      
              String category1 = "Top Lists";
              String category2 = "Super Mood";
              String category3 = "Party Time";
      
              if (!outputAfterCategories.contains(category1)
                      || !outputAfterCategories.contains(category2)
                      || !outputAfterCategories.contains(category3)) {
      
                  return CheckResult.wrong("There are no categories in correct format on \"category\" action");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testFeatured() {
      
              TestedProgram userProgram = new TestedProgram();
      
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              auth(userProgram);
      
              userProgram.execute("featured");
      
              if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                  return CheckResult.wrong("Access token is incorrect!");
              }
      
              String outputAfterFeatured = userProgram.getOutput();
      
              String featured1 =
                      "Monday Morning Mood\n" +
                              "http://open.spotify.com/user/spotify/playlist/6ftJBzU2LLQcaKefMi7ee7"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              String featured2 =
                      "Upp och hoppa!\n" +
                              "http://open.spotify.com/user/spotify__sverige/playlist/4uOEx4OUrkoGNZoIlWMUbO"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              if (!outputAfterFeatured.contains(featured1)
                      || !outputAfterFeatured.contains(featured2)) {
      
                  return CheckResult.wrong("There are no featured playlists in correct format on \"featured\" action");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testPartyPlayList() {
      
              TestedProgram userProgram = new TestedProgram();
      
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              auth(userProgram);
      
              userProgram.execute("playlists Party Time");
      
              if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                  return CheckResult.wrong("Access token is incorrect!");
              }
      
              String outputAfterPartyPlaylist = userProgram.getOutput();
      
              String playlist1 =
                      "Noite Eletronica\n" +
                              "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              String playlist2 =
                      "Festa Indie\n" +
                              "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              if (!outputAfterPartyPlaylist.contains(playlist1)
                      || !outputAfterPartyPlaylist.contains(playlist2)) {
                  return CheckResult.wrong("There are no playlists in correct format on \"playlists {name}\" action. " +
                          "Make sure you correctly parsed the category name.");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testUnknownPlayList() {
      
              TestedProgram userProgram = new TestedProgram();
      
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              auth(userProgram);
      
              userProgram.execute("playlists Party Time");
      
              if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                  return CheckResult.wrong("Access token is incorrect!");
              }
      
              String outputAfterUnknownPlaylist = userProgram.getOutput();
      
              String playlist1 =
                      "Noite Eletronica\n" +
                              "http://open.spotify.com/user/spotifybrazilian/playlist/4k7EZPI3uKMz4aRRrLVfen"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              String playlist2 =
                      "Festa Indie\n" +
                              "http://open.spotify.com/user/spotifybrazilian/playlist/4HZh0C9y80GzHDbHZyX770"
                                      .replaceAll(spotifyServerUrl, resourceServerUrl);
      
              if (!outputAfterUnknownPlaylist.contains(playlist1)
                      || !outputAfterUnknownPlaylist.contains(playlist2)) {
      
                  return CheckResult.wrong("There are no playlists in correct format on \"playlists {name}\" action. " +
                          "Make sure you correctly parsed the category name.");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          CheckResult testTopPlayList() {
      
              TestedProgram userProgram = new TestedProgram();
      
              userProgram.start(arguments);
              userProgram.setReturnOutputAfterExecution(false);
      
              auth(userProgram);
      
              userProgram.execute("playlists Top Lists");
      
              if(!resourceServerMock.getAccess_token().contains(fictiveAccessToken)) {
                  return CheckResult.wrong("Access token is incorrect!");
              }
      
              String outputAfterUnknownPlaylist = userProgram.getOutput();
      
              if (!outputAfterUnknownPlaylist.contains(testErrorMessage)) {
                  return new CheckResult(false,
                          "You got a json with unpredictable error from the api. " +
                                  "Error message should be parsed from the api response and printed.");
              }
      
              userProgram.execute("exit");
              if (!userProgram.isFinished()) {
                  userProgram.stop();
              }
      
              return CheckResult.correct();
          }
      
          @AfterClass
          public static void afterTest() {
              tokenServer.stopMock();
              resourceServer.stopMock();
          }
      
      }
    learner_created: false
  - name: test/Server.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.output.OutputHandler;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.net.URI;
      import java.net.http.HttpClient;
      import java.net.http.HttpRequest;
      import java.net.http.HttpResponse;
      import java.net.http.HttpTimeoutException;
      import java.time.Duration;
      
      public class Server extends Thread {
      
          TestedProgram userProgram;
          private final String fictiveAuthCode;
          public static CheckResult checkResult = null;
          String redirectUri = "";
      
      
          public Server(TestedProgram userProgram, String fictiveAuthCode) {
              this.userProgram = userProgram;
              this.fictiveAuthCode = fictiveAuthCode;
          }
      
          @Override
          public void run() {
              long searchTime = System.currentTimeMillis();
      
              while (!Thread.interrupted()) {
      
                  if (System.currentTimeMillis() - searchTime > 1000 * 9) {
                      checkResult = CheckResult.wrong("Not found a link with redirect_uri after 9 seconds.");
                      return;
                  }
      
                  String out = OutputHandler.getDynamicOutput();
                  if (out.contains("redirect_uri=")) {
                      redirectUri = out.split("redirect_uri=")[1];
                      if (redirectUri.contains("&")) {
                          redirectUri = redirectUri.split("&")[0];
                      }
                      if (redirectUri.contains("\n")) {
                          redirectUri = redirectUri.split("\\R")[0];
                      }
                      break;
                  }
      
                  try {
                      sleep(100);
                  } catch (InterruptedException e) {
                      e.printStackTrace();
                  }
              }
      
              try {
                  HttpClient client = HttpClient.newBuilder().build();
                  HttpRequest emptyRequest = HttpRequest.newBuilder()
                          .uri(URI.create(redirectUri))
                          .timeout(Duration.ofMillis(500))
                          .GET()
                          .build();
                  HttpRequest errorRequest = HttpRequest.newBuilder()
                          .uri(URI.create(redirectUri + "?error=access_denied"))
                          .timeout(Duration.ofMillis(500))
                          .GET()
                          .build();
                  HttpRequest codeRequest = HttpRequest.newBuilder()
                          .uri(URI.create(redirectUri + "?code=" + fictiveAuthCode))
                          .timeout(Duration.ofMillis(500))
                          .GET()
                          .build();
      
                  System.out.println("Tester: making requests to redirect uri: " + redirectUri);
                  HttpResponse<String> badResponse = client.send(emptyRequest, HttpResponse.BodyHandlers.ofString());
                  System.out.println("Tester: done request 1: " + badResponse.body());
                  HttpResponse<String> badResponse2 = client.send(errorRequest, HttpResponse.BodyHandlers.ofString());
                  System.out.println("Tester: done request 2: " + badResponse2.body());
                  HttpResponse<String> goodResponse = client.send(codeRequest, HttpResponse.BodyHandlers.ofString());
                  System.out.println("Tester: done request 3: " + goodResponse.body());
      
                  if (!badResponse.body().contains("Authorization code not found. Try again.")
                          || !badResponse2.body().contains("Authorization code not found. Try again.")) {
                      checkResult = CheckResult.wrong("You should send to the browser: `Authorization code not found. Try again.` if there is no code.");
                      return;
                  }
      
                  if (!goodResponse.body().contains("Got the code. Return back to your program.")) {
                      checkResult = CheckResult.wrong("\"You should send `Got the code. Return back to your program.` \" +\n" +
                              "                        \"if the query contains the code.");
                  }
              } catch (HttpTimeoutException e) {
                  checkResult = CheckResult.wrong("Not received any response from the server, found in redirect_uri: "
                          + redirectUri);
              } catch (InterruptedException e) {
                  checkResult = CheckResult.wrong("Request to " + redirectUri + " was interrupted. " +
                          "Make sure, that you give the right feedback in your browser.");
              } catch (Exception e) {
                  System.out.println("Tester: Error: " + e.getMessage());
                  e.printStackTrace();
              }
      
          }
      }
    learner_created: false
  - name: test/TempWebServerMock.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.WebPage;
      import org.hyperskill.hstest.mocks.web.WebServerMock;
      import org.hyperskill.hstest.mocks.web.request.HttpRequest;
      import org.hyperskill.hstest.mocks.web.request.HttpRequestParser;
      
      import java.io.DataInputStream;
      import java.io.DataOutputStream;
      import java.io.IOException;
      import java.net.ServerSocket;
      import java.net.Socket;
      import java.util.HashMap;
      import java.util.Map;
      
      public class TempWebServerMock extends WebServerMock {
      
          private static final String DELIM = "/";
          private static final String fictiveAccessToken = "456456";
          private static final String authorizationHeader = "Authorization";
      
      //    public static void main(String[] args) { // for testing
      //        org.hyperskill.hstest.mocks.web.WebServerMock ws = new org.hyperskill.hstest.mocks.web.WebServerMock(12345);
      //        ws.start();
      //        ws.run();
      //    }
      
          private ServerSocket serverSocket;
          private final Map<String, String> pages = new HashMap<>();
          private final int port;
      
          private boolean isStarted = false;
          private boolean isStopped = false;
      
          private String access_token = "";
      
          public TempWebServerMock(int port) {
              super(port);
              this.port = port;
          }
      
          public TempWebServerMock setPage(String url, String content) {
              return setPage(url, new WebPage().setContent(content));
          }
      
          public TempWebServerMock setPage(String url, WebPage page) {
              if (!url.startsWith(DELIM)) {
                  url = DELIM + url;
              }
              pages.put(url, page.contentWithHeader());
              return this;
          }
      
          public String getAccess_token() {
              return access_token;
          }
      
          private void checkRequestHeaders(HttpRequest request) throws WrongAnswer {
              Map<String,String> requestHeaders = request.getHeaders();
      
              if(requestHeaders.containsKey(authorizationHeader)) {
                  if(requestHeaders.get(authorizationHeader).contains(fictiveAccessToken)) {
                      access_token = requestHeaders.get(authorizationHeader);
                  }
              }
          }
      
          private String resolveRequest(DataInputStream input) {
              HttpRequest request = HttpRequestParser.parse(input);
              checkRequestHeaders(request);
              return request != null ? request.getEndpoint() : null;
          }
      
          private void sendResponse(String path, DataOutputStream output) throws Exception {
              String response;
              if (path == null) {
                  response = "Webpage not found!";
              } else {
                  if (!path.startsWith(DELIM)) {
                      path = DELIM + path;
                  }
                  response = pages.getOrDefault(path, "Webpage not found!");
              }
              for (char c : response.toCharArray()) {
                  output.write(c);
              }
          }
      
          private void handle(Socket socket) throws Exception {
              DataInputStream input = new DataInputStream(socket.getInputStream());
              DataOutputStream output = new DataOutputStream(socket.getOutputStream());
              sendResponse(resolveRequest(input), output);
              input.close();
              output.close();
              socket.close();
          }
      
          public void start() {
              try {
                  serverSocket = new ServerSocket(port);
              } catch (IOException ignored) { }
          }
      
          public void run() {
              try {
                  while (serverSocket != null && !serverSocket.isClosed()) {
                      isStarted = true;
                      isStopped = false;
                      handle(serverSocket.accept());
                  }
              } catch (Exception ignored) { }
              isStarted = false;
              isStopped = true;
          }
      
          public void stop() {
              try {
                  if (serverSocket != null) {
                      serverSocket.close();
                  }
              } catch (IOException ignored) { }
          }
      
          public boolean isStarted() {
              return isStarted;
          }
      
          public boolean isStopped() {
              return isStopped;
          }
      }
    learner_created: false
  - name: src/advisor/Authentication.java
    visible: true
    text: |
      package advisor;
      
      import com.sun.net.httpserver.HttpExchange;
      import com.sun.net.httpserver.HttpHandler;
      import com.sun.net.httpserver.HttpServer;
      
      import java.io.IOException;
      import java.net.InetSocketAddress;
      import java.net.URI;
      import java.net.http.HttpRequest;
      import java.net.http.HttpClient;
      import java.net.http.HttpResponse;
      
      public class Authentication {
          public static String URI_PATH = "https://accounts.spotify.com";
          public static String REDIRECT_URI = "http://localhost:8080";
          public static String CLIENT_ID = "2bc60cfbd5e841bfbefb98d5a1187a46";
          public static String CLIENT_SECRET = "a77aed7085bf4257816da79ccc6f3c3f";
          public static String ACCESS_CODE = "";
          public static String ACCESS_TOKEN = "";
      
          public void getAccessCode() {
      
              String authRequestUri = URI_PATH +
                      "/authorize?client_id=" + CLIENT_ID +
                      "&response_type=code" +
                      "&redirect_uri=" + REDIRECT_URI;
      
              System.out.println("use this link to request the access code:");
              System.out.println(authRequestUri);
      
              try {
                  HttpServer server = HttpServer.create();
                  server.bind(new InetSocketAddress(8080), 0);
                  server.start();
                  server.createContext("/",
                          new HttpHandler() {
                              public void handle(HttpExchange exchange) throws IOException {
                                  String query = exchange.getRequestURI().getQuery();
                                  String request;
      
                                  if (query != null && query.contains("code")) {
                                      ACCESS_CODE = query.substring(5);
                                      System.out.println("code received");
                                      request = "Got the code. Return back to your program.";
                                  } else {
                                      request = "Authorization code not found. Try again.";
                                  }
      
                                  exchange.sendResponseHeaders(200, request.length());
                                  exchange.getResponseBody().write(request.getBytes());
                                  exchange.getResponseBody().close();
                              }
                          });
      
                  System.out.println("waiting for code...");
                  while (ACCESS_CODE.length() == 0) {
                      Thread.sleep(100);
                  }
                  server.stop(5);
      
              } catch (IOException | InterruptedException e) {
                  System.out.println("Server error");
              }
          }
      
          public void getAccessToken() {
      
              System.out.println("making http request for access_token...");
              System.out.println("response:");
      
              HttpRequest request = HttpRequest.newBuilder()
                      .header("Content-Type", "application/x-www-form-urlencoded")
                      .uri(URI.create(URI_PATH + "/api/token"))
                      .POST(HttpRequest.BodyPublishers.ofString(
                              "grant_type=authorization_code"
                                      + "&code=" + ACCESS_CODE
                                      + "&client_id=" + CLIENT_ID
                                      + "&client_secret=" + CLIENT_SECRET
                                      + "&redirect_uri=" + REDIRECT_URI))
                      .build();
      
              try {
      
                  HttpClient client = HttpClient.newBuilder().build();
                  HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
      
                  System.out.println(response.body());
                  System.out.println("---SUCCESS---");
      
              } catch (InterruptedException | IOException e) {
                  System.out.println("Error response");
              }
          }
      }
    learner_created: true
  - name: src/advisor/Service.java
    visible: true
    text: |-
      package advisor;
      
      import java.util.Scanner;
      
      public class Service {
          Scanner scanner = new Scanner(System.in);
          boolean isAuthorized = false;
      
          public void start() {
      
              while (true) {
      
                  String input = scanner.nextLine();
      
                  switch (input) {
      
                      case "auth":
                          setAuthorization();
                          break;
      
                      case "featured":
                          getFeatured(isAuthorized);
                          break;
      
                      case "new":
                          getReleased(isAuthorized);
                          break;
      
                      case "categories":
                          getCategories(isAuthorized);
                          break;
      
                      case "exit":
                          System.out.println("---GOODBYE!---");
                          return;
      
                      default:
      
                          if (input.matches("playlists .+")) {
      
                              String categoriesName = input.substring(10);
                              getPlaylists(isAuthorized, categoriesName);
                          }
                  }
              }
          }
      
          public void setAuthorization() {
              Authentication auth = new Authentication();
              auth.getAccessCode();
              auth.getAccessToken();
              this.isAuthorized = true;
          }
      
          public void getReleased(boolean auth) {
              if (auth) {
                  MusicApi.getNewReleases();
              } else {
                  System.out.println("Please, provide access for application.");
              }
          }
      
          public void getFeatured(boolean auth) {
              if (auth) {
                  MusicApi.getFeaturedPlaylists();
              } else {
                  System.out.println("Please, provide access for application.");
              }
          }
      
          public void getCategories(boolean auth) {
              if (auth) {
                  MusicApi.getAllCategories();
              } else {
                  System.out.println("Please, provide access for application.");
              }
          }
      
          public void getPlaylists(boolean auth, String categoriesName) {
              if (auth) {
                  MusicApi.getSelectedPlaylists(categoriesName);
              } else {
                  System.out.println("Please, provide access for application.");
              }
          }
      }
    learner_created: true
  - name: src/advisor/MusicApi.java
    visible: true
    text: |
      package advisor;
      
      import com.google.gson.JsonArray;
      import com.google.gson.JsonElement;
      import com.google.gson.JsonObject;
      import com.google.gson.JsonParser;
      
      import java.io.IOException;
      import java.net.URI;
      import java.net.http.HttpClient;
      import java.net.http.HttpRequest;
      import java.net.http.HttpResponse;
      import java.util.ArrayList;
      import java.util.HashMap;
      import java.util.LinkedHashMap;
      
      public class MusicApi {
          static String API_LINK = "https://api.spotify.com";
          static HashMap<String, String> categoryNameAndId = new HashMap<>();
          static boolean categoriesObtained = false;
      
          static void getAllCategories() {
      
              String requestUri = API_LINK + "/v1/browse/categories";
      
              HttpRequest httpRequest = HttpRequest.newBuilder()
                      .header("Authorization", "Bearer " + Authentication.ACCESS_TOKEN)
                      .uri(URI.create(requestUri))
                      .GET()
                      .build();
      
              HttpClient httpClient = HttpClient.newBuilder().build();
      
              try {
                  HttpResponse<String> response = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());
      //            System.out.println(response.statusCode());
      
                  JsonObject object = JsonParser.parseString(response.body()).
                          getAsJsonObject().
                          getAsJsonObject("categories");
      
                  JsonArray array = object.getAsJsonArray("items");
      
                  for (JsonElement item : array) {
      
                      String name = item.getAsJsonObject().get("name").getAsString();
                      String id = item.getAsJsonObject().get("id").getAsString();
                      categoryNameAndId.put(name, id);
                      categoriesObtained = true;
                  }
      
              } catch (InterruptedException | IOException e) {
                  System.out.println("Problem in handling category response.");
                  e.printStackTrace();
      
              }
          }
      
          static void printCategoryList() {
              System.out.println("Top Lists");
              for (var name : categoryNameAndId.keySet()) {
                  System.out.println(name);
              }
          }
      
          static void getFeaturedPlaylists() {
      
              String requestUri = API_LINK + "/v1/browse/featured-playlists";
      
              HttpRequest request = HttpRequest.newBuilder()
                      .header("Authorization", "Bearer " + Authentication.ACCESS_TOKEN)
                      .uri(URI.create(requestUri))
                      .GET()
                      .build();
      
              HttpClient client = HttpClient.newBuilder().build();
      
              try {
                  HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                  LinkedHashMap<String, String> fPlaylists = new LinkedHashMap<>();
      
                  JsonObject object = JsonParser.parseString(response.body())
                          .getAsJsonObject()
                          .getAsJsonObject("playlists");
      
                  JsonArray array = object.getAsJsonArray("items");
      
                  for (JsonElement item : array) {
      
                      String url = item.getAsJsonObject()
                              .get("external_urls").getAsJsonObject()
                              .get("spotify").getAsString();
      
                      String name = item.getAsJsonObject().get("name").getAsString();
      
                      fPlaylists.put(name, url);
                  }
      
                  for (var entry : fPlaylists.entrySet()) {
                      System.out.println(entry.getKey());
                      System.out.println(entry.getValue());
                      System.out.println();
                  }
      
              } catch (IOException | InterruptedException e) {
                  System.out.println("Problem in handling featured playlist response.");
                  e.printStackTrace();
              }
          }
      
          static void getNewReleases() {
      
              String requestUri = API_LINK + "/v1/browse/new-releases";
      
              HttpRequest request = HttpRequest.newBuilder()
                      .header("Authorization", "Bearer " + Authentication.ACCESS_TOKEN)
                      .uri(URI.create(requestUri))
                      .GET()
                      .build();
      
              HttpClient client = HttpClient.newBuilder().build();
      
              try {
                  HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
      
                  JsonArray array = JsonParser.parseString(response.body()).getAsJsonObject()
                          .get("albums").getAsJsonObject()
                          .getAsJsonArray("items");
      
                  for (JsonElement item : array) {
      
      
                      String albumName = item.getAsJsonObject().get("name").getAsString();
                      String albumLink = item.getAsJsonObject()
                              .get("external_urls").getAsJsonObject()
                              .get("spotify").getAsString();
      
                      ArrayList<String> artistList = new ArrayList<>();
      
                      JsonArray artists = item.getAsJsonObject().get("artists").getAsJsonArray();
      
                      for (JsonElement artist : artists) {
                          artistList.add(artist.getAsJsonObject().get("name").getAsString());
                      }
      
                      System.out.println(albumName);
                      System.out.println(artistList);
                      System.out.println(albumLink);
                      System.out.println();
                  }
      
              } catch (IOException | InterruptedException e) {
                  System.out.println("Problem in handling new releases response.");
                  e.printStackTrace();
              }
          }
      
          static void getSelectedPlaylists(String categoryName) {
      
              if (!categoriesObtained) {
                  getAllCategories();
                  categoriesObtained = true;
              }
      
              if (!categoryNameAndId.containsKey(categoryName)) {
                  System.out.println("Unknown category name.");
                  return;
              }
      
              String categoryID = categoryNameAndId.get(categoryName);
              String requestUri = API_LINK + "/v1/browse/categories/" + categoryID + "/playlists";
      
              HttpRequest httpRequest = HttpRequest.newBuilder()
                      .header("Authorization", "Bearer " + Authentication.ACCESS_TOKEN)
                      .uri(URI.create(requestUri))
                      .GET()
                      .build();
      
              HttpClient httpClient = HttpClient.newBuilder().build();
      
              try {
                  HttpResponse<String> response = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());
      
                  if (response.body().contains("error") && response.body().contains("404")) {
      
                      JsonObject object = JsonParser.parseString(response.body()).getAsJsonObject();
                      String message = object.get("error").getAsJsonObject()
                              .get("message").getAsString();
                      System.out.println(message);
                      return;
                  }
      
                  JsonObject object = JsonParser.parseString(response.body()).getAsJsonObject()
                          .get("playlists").getAsJsonObject();
      
                  JsonArray array = object.get("items").getAsJsonArray();
      
                  for (JsonElement item : array) {
      
                      String name = item.getAsJsonObject().get("name").getAsString();
                      String link = item.getAsJsonObject().get("external_urls").getAsJsonObject()
                              .get("spotify").getAsString();
      
                      System.out.println(name);
                      System.out.println(link);
                      System.out.println();
                  }
      
              } catch (IOException | InterruptedException e) {
                  System.out.println("Problem in handling categorised playlist response.");
                  e.printStackTrace();
              }
          }
      
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5480#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Mon, 05 Feb 2024 13:32:21 UTC"
record: 4
